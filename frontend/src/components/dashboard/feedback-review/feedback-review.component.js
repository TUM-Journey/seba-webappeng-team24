'use strict';

import FeedbackService from '../../../services/feedback/feedback.service';
import UserService from '../../../services/user/user.service';
import template from './feedback-review.template.html';
import './feedback-review.style.css';
import pdf from 'pdfjs'
import helvetica from './assets/Helvetica.json'
import icon from './assets/evaluateone-icon.jpg'

class FeedbackReviewComponent {
  constructor() {
    this.controller = FeedbackReviewComponentController;
    this.template = template;

  }

  static get name() {
    return 'feedbackReview';
  }
}

class FeedbackReviewComponentController {

  constructor($scope, $state, feedbackService, userService, FileSaver, Blob) {
    this.FileSaver = FileSaver;
    this.Blob = Blob;
    this.$state = $state;
    this.feedbackService = feedbackService;
    this.userService = userService;

    this.users = userService.listAllUsers();

    this.selectedUser = null;
    this.feedbacks = null;
    this.avgMatrix = null;
  }

  refreshFeedbacks() {
    if (!this.selectedUser) {
      this.feedbacks = [];
      return;
    }

    this.feedbacks = this.feedbackService.listAll({ username: this.selectedUser.username });
  }

  save(doc) {
    return doc.asBuffer()
      .then(buf => {
        const blob = new this.Blob([buf], { type: 'application/pdf' })
        return this.FileSaver.saveAs(blob, 'test.pdf')

      })
  }

  generatePdf() {

    const doc = new pdf.Document({
      font: new pdf.Font(helvetica),
      padding: 10
    })

    // Trying to load this fucking image into a buffer so that I can use it as an argument
    // in new pdf.Image(buffer)
    var header = doc.header().table({ widths: [null, null], paddingBottom: 1 * pdf.cm }).row()
    var buffer = fetch(icon)
      .then((response) => {
        return response.blob()
      })
      .then((blob) => {
        var fr = new FileReader()
        var buffer = fr.readAsArrayBuffer(blob)
        console.log(buffer)
      })
    // header.cell().image(new pdf.Image(buffer), { height: 2 * pdf.cm })
    header.cell().text("testing")
    header.cell().text({ textAlign: 'right' })
      .add('This document is generated by the evaluati.one app, made by the Seba-24 group')
      .add('https://github.com/wingsofovnia/seba-webappeng-team24', {
        link: 'https://github.com/wingsofovnia/seba-webappeng-team24',
        underline: true,
        color: 0x569cd6
      })
    for (let feedback of this.feedbacks) {
      doc.text(feedback.author.name)
      doc.text(feedback.summary)
      for (let competency of feedback.competencies) {
        doc.text(competency.characteristic.name)
        doc.text(competency.grade + "/10")
      }
    }
    // doc.text(this.feedbacks)
    doc.text("test test test")
    const file = this.save(doc)
    console.log(file)

  }


  refreshAvgMatrix() {
    if (!this.selectedUser) {
      this.avgMatrix = null;
      return;
    }

    this.avgMatrix = this.feedbackService.userAvgMatrix({ username: this.selectedUser.username });
  }

  static get $inject() {
    return ['$scope', '$state', FeedbackService.name, UserService.name, 'FileSaver', 'Blob'];
  }
}


export default FeedbackReviewComponent;
