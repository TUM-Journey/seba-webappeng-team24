'use strict';

import FeedbackService from '../../../services/feedback/feedback.service';
import UserService from '../../../services/user/user.service';
import template from './feedback-review.template.html';
import './feedback-review.style.css';
import pdf from 'pdfjs'
import helvetica from './assets/Helvetica.json'
import helveticaBold from './assets/Helvetica-Bold.json'
import icon from './assets/evaluateone-icon.jpg'

class FeedbackReviewComponent {
  constructor() {
    this.controller = FeedbackReviewComponentController;
    this.template = template;

  }

  static get name() {
    return 'feedbackReview';
  }
}

class FeedbackReviewComponentController {

  constructor($scope, $state, feedbackService, userService, FileSaver, Blob) {
    this.FileSaver = FileSaver;
    this.Blob = Blob;
    this.$state = $state;
    this.feedbackService = feedbackService;
    this.userService = userService;

    this.users = userService.listAllUsers();

    this.selectedUser = null;
    this.feedbacks = null;
    this.avgMatrix = null;
  }

  refreshFeedbacks() {
    if (!this.selectedUser) {
      this.feedbacks = [];
      return;
    }

    this.feedbacks = this.feedbackService.listAll({ username: this.selectedUser.username });
    for (let feedback of this.feedbacks) {
      var d = new Date(feedback.created_at)
      feedback.created_at = d.toLocaleString()
    }
  }

  save(doc) {
    return doc.asBuffer()
      .then(buf => {
        const blob = new this.Blob([buf], { type: 'application/pdf' })
        return this.FileSaver.saveAs(blob, 'test.pdf')

      })
  }

  generatePdf() {

    const doc = new pdf.Document({
      font: new pdf.Font(helvetica),
      padding: 10
    })

    // Trying to load this fucking image into a buffer so that I can use it as an argument
    // in new pdf.Image(buffer)
    var header = doc.header().table({ widths: [null, null], paddingBottom: 1 * pdf.cm }).row()
    var buffer = fetch(icon)
      .then((response) => {
        return response.blob()
      })
      .then((blob) => {
        var fr = new FileReader()
        var buffer = fr.readAsArrayBuffer(blob)
        console.log(buffer)
      })
    // header.cell().image(new pdf.Image(buffer), { height: 2 * pdf.cm })
    header.cell().text("Evaluati.one", { fontSize: 16, color: '#ff0000' })
    let generation_date = new Date()
    generation_date = generation_date.toLocaleString()
    header.cell().text({ textAlign: 'right' })
      .add('Generated at: ' + generation_date).br()
      .add('This document is generated by the evaluati.one app, made by the Seba-24 group')
      .add('https://github.com/wingsofovnia/seba-webappeng-team24', {
        link: 'https://github.com/wingsofovnia/seba-webappeng-team24',
        underline: true,
        color: 0x569cd6
      })
    doc.footer()
      .pageNumber((curr, total) => `${curr} / ${total}`, { textAlign: 'center', fontSize: 16 })
    doc.text("Feedback Report of " + this.feedbacks[0].user.name, {
      fontSize: 16, font: new pdf.Font(helveticaBold)
      , color: "#ff0000", textAlign: 'center'
    }).br()


    for (let feedback of this.feedbacks) {
      console.log(feedback)
      doc.text('  Author: ' + feedback.author.name, { fontSize: 12, color: "#00008b" }).br()
      doc.text('  Summary: ' + feedback.summary).br()
      var d = new Date(feedback.created_at)
      doc.text('  Submitted at: ' + d.toLocaleString()).br()
      var table = doc.table({
        widths: [null, null],
        borderHorizontalWidths: function (i) { return i < 2 ? 1 : 0.1 },
        padding: 10,
      })
      let th = table.header({ font: new pdf.Font(helveticaBold), borderBottomWidth: 1.5 })
      th.cell('Matrix Characteristic', { textAlign: 'center' })
      th.cell('Grade', { textAlign: 'center' })
      for (let competency of feedback.competencies) {
        let tr = table.row()
        tr.cell(competency.characteristic.name, { textAlign: 'center' })
        tr.cell(competency.grade + "/10", { textAlign: 'center' })
      }
    }
    const file = this.save(doc)
    console.log(file)

  }


  refreshAvgMatrix() {
    if (!this.selectedUser) {
      this.avgMatrix = null;
      return;
    }

    this.avgMatrix = this.feedbackService.userAvgMatrix({ username: this.selectedUser.username });
  }

  static get $inject() {
    return ['$scope', '$state', FeedbackService.name, UserService.name, 'FileSaver', 'Blob'];
  }
}


export default FeedbackReviewComponent;
