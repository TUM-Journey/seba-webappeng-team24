'use strict';

import FeedbackService from '../../../services/feedback/feedback.service';
import UserService from '../../../services/user/user.service';
import template from './feedback-review.template.html';
import './feedback-review.style.css';
import pdf from 'pdfjs'
import helvetica from './assets/Helvetica.json'
import helveticaBold from './assets/Helvetica-Bold.json'
import icon from './assets/evaluateone-icon.jpg'

class FeedbackReviewComponent {
  constructor() {
    this.controller = FeedbackReviewComponentController;
    this.template = template;

  }

  static get name() {
    return 'feedbackReview';
  }
}

class FeedbackReviewComponentController {

  constructor($state, feedbackService, userService, FileSaver, Blob) {
    this.FileSaver = FileSaver;
    this.Blob = Blob;
    this.$state = $state;
    this.feedbackService = feedbackService;
    this.userService = userService;

    this.users = userService.fetchAllUsers();

    this.selectedUser = null;
    this.feedbacks = null;
    this.avgMatrix = null;
    this.generation_date = new Date()
    this.title_date = this.generation_date.toLocaleDateString()
    this.generation_date = this.generation_date.toLocaleString()
  }

  refreshFeedbacks() {
    if (!this.selectedUser) {
      this.feedbacks = [];
      return;
    }

    this.feedbacks = this.feedbackService.listAll({ username: this.selectedUser.username });
    for (let feedback of this.feedbacks) {
      var d = new Date(feedback.created_at)
      feedback.created_at = d.toLocaleString()
    }
  }

  async deleteFeedback(feedback){
    await this.feedbackService.removeFeedback({id: feedback._id}).$promise;

    this.refreshFeedbacks();
    this.refreshAvgMatrix();
  }

  save(doc) {
    return doc.asBuffer()
      .then(buf => {
        const blob = new this.Blob([buf], { type: 'application/pdf' })
        let pdfName = this.feedbacks[0].user.name + "_" + this.title_date + '.pdf'
        return this.FileSaver.saveAs(blob, pdfName)

      })
  }


  generatePdf() {

    const doc = new pdf.Document({
      font: new pdf.Font(helvetica),
      padding: 10,
      fontSize: 10,
    })
    // Trying to load this image into a buffer so that I can use it as an argument
    // in new pdf.Image(buffer)
    // const toDataURL = url => fetch(url)
    //   .then(response => response.blob())
    //   .then(blob => new Promise((resolve, reject) => {
    //     const reader = new FileReader()
    //     reader.onloadend = () => resolve(reader.result)
    //     reader.onerror = reject
    //     reader.readAsDataURL(blob)
    //   }))

    // toDataURL(icon)
    //   .then(dataUrl => {
    //     console.log('RESULT:', dataUrl)
    //   })
    var header = doc.header().table({ widths: [null, null], paddingBottom: 1 * pdf.cm }).row()
    // header.cell().image(new pdf.Image(dataUrl), { height: 2 * pdf.cm })
    header.cell().text("Evaluati.one", { fontSize: 16, color: '#ff0000' })
    header.cell().text({ textAlign: 'right' })
      .add('Generated at: ' + this.generation_date).br()
      .add('This document is generated by the evaluati.one app, made by the Seba-24 group')
      .add('https://github.com/wingsofovnia/seba-webappeng-team24', {
        link: 'https://github.com/wingsofovnia/seba-webappeng-team24',
        underline: true,
        color: 0x569cd6
      })


    doc.footer()
      .pageNumber((curr, total) => `${curr} / ${total}`, { textAlign: 'center', fontSize: 16 })

    doc.text("Feedback Report of " + this.feedbacks[0].user.name, {
      fontSize: 16, font: new pdf.Font(helveticaBold)
      , color: "#ff0000", textAlign: 'center'
    }).br()

    doc.text("Averages", { textAlign: 'center', fontSize: 13, color: '#0000FF', underline: true }).br()
    let table = doc.table({
      widths: [null, null],
      borderWidth: 1.5,
      padding: 5,
    })
    // fix this hack
    for (let competency of this.feedbacks[0].competencies) {
      let tr = table.row()
      tr.cell(competency.characteristic.name, { textAlign: 'center' })
      tr.cell(this.avgMatrix[competency.characteristic.name] + '/10', { textAlign: 'center' })
      // doc.text(competency.characteristic.name + ":" + this.avgMatrix[competency.characteristic.name])
    }
    doc.text("  ").br()
    doc.text("Individual Feedbacks", { textAlign: 'center', fontSize: 13, color: '#0000FF', underline: true }).br()
    for (var i = 0; i < this.feedbacks.length; i++) {
      let feedback = this.feedbacks[i]
      doc.text('  #' + i)
      doc.text('  Author: ' + feedback.author.name, { fontSize: 11, color: "#00008b" })
      doc.text('  Summary: ' + feedback.summary)
      let d = new Date(feedback.created_at)
      doc.text('  Submitted at: ' + d.toLocaleString()).br()
      let table = doc.table({
        widths: [null, null],
        borderWidth: 1.5,
        padding: 5,
      })
      for (let competency of feedback.competencies) {
        let tr = table.row()
        tr.cell(competency.characteristic.name, { textAlign: 'center' })
        tr.cell(competency.grade + "/10", { textAlign: 'center' })
      }
      doc.text("  ").br()
    }
    const file = this.save(doc)

  }


  refreshAvgMatrix() {
    if (!this.selectedUser) {
      this.avgMatrix = null;
      return;
    }

    this.avgMatrix = this.feedbackService.userAvgMatrix({ username: this.selectedUser.username });
  }

  static get $inject() {
    return ['$state', FeedbackService.name, UserService.name, 'FileSaver', 'Blob'];
  }
}


export default FeedbackReviewComponent;
